name: opv2v_m1_m2_nego_interact
root_dir: "dataset/OPV2V/train"
validate_dir: "dataset/OPV2V/validate"
test_dir: "dataset/OPV2V/test"

yaml_parser: "load_general_params"

train_setting:
  pc_grad: &pc_grad True
  pc_grad_group: False
  nego:
    train_params:
      batch_size: 1
      epoches: &epoches_nego 12
      eval_freq: 2
      save_freq: 1
      max_cav: 5

    optimizer:
      core_method: Adam
      lr: 0.001
      args:
        eps: 1e-10
        weight_decay: 1e-4
    lr_scheduler:
      core_method: multistep #step, multistep and Exponential support
      gamma: 0.1
      step_size: [10, 15, 20]

comm_range: 70
input_source: ['lidar', 'camera', 'depth']
label_type: 'lidar'
cav_lidar_range: &cav_lidar [-102.4, -51.2, -3, 102.4, 51.2, 1]

add_data_extension: ['bev_visibility.png']

heter:
  assignment_path: "opencood/logs/heter_modality_assign/opv2v_4modality.json" 
  ego_modality: &ego_modality "m1&m2"
  mapping_dict: &mapping_dict
    m1: m1
    m2: m1
    m3: m2
    m4: m2
  # lidar_channels_dict:
  #   m3: 32
  modality_setting:
    m1:
      sensor_type: &sensor_type_m1 'lidar'
      core_method: &core_method_m1 "point_pillar"

      # lidar requires preprocess
      preprocess:
        # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
        core_method: 'SpVoxelPreprocessor'
        args:
          voxel_size: &voxel_size [0.4, 0.4, 4]
          max_points_per_voxel: 32
          max_voxel_train: 32000
          max_voxel_test: 70000
        # lidar range for each individual cav.
        cav_lidar_range: *cav_lidar
    m2:
      sensor_type: &sensor_type_m2 'camera'
      core_method: &core_method_m2 "lift_splat_shoot"

      grid_conf: &grid_conf_m2
        xbound: [-51.2, 51.2, 0.4]   # Limit the range of the x direction and divide the grids
        ybound: [-51.2, 51.2, 0.4]   # Limit the range of the y direction and divide the grids
        zbound: [-10, 10, 20.0]   # Limit the range of the z direction and divide the grids
        ddiscr: [2, 50, 48]
        mode: 'LID'
      data_aug_conf: &data_aug_conf_m2
        resize_lim: [0.65, 0.7]
        final_dim: [384, 512]
        rot_lim: [-3.6, 3.6]
        H: 600
        W: 800
        rand_flip: False
        bot_pct_lim: [0.0, 0.05]
        cams: ['camera0', 'camera1', 'camera2', 'camera3']
        Ncams: 4


fusion:
  # core_method: 'intermediateheterpair'
  core_method: 'intermediateheterpair'
  dataset: 'opv2v'
  args: 
    proj_first: false
    grid_conf: None # place-holder
    data_aug_conf: None # place-holder

# fusion:
#   core_method: 'lateheterpair'
#   dataset: 'opv2v'
#   args: 
#     proj_first: false
#     grid_conf: None # place-holder
#     data_aug_conf: None # place-holder

data_augment: # no use in intermediate fusion
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: [0.4, 0.4, 4] # useful
    max_points_per_voxel: 1 # useless
    max_voxel_train: 1 # useless
    max_voxel_test: 1 # useless
  # lidar range for each individual cav.
  cav_lidar_range: *cav_lidar

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  # core_method: 'VoxelPostprocessor'
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: &anchor_yaw [0, 90]
    feature_stride: 2
    num: &anchor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.2
  order: 'hwl' # hwl or lwh
  max_num: 150 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15
  dir_args: &dir_args
    dir_offset: 0.7853
    num_bins: 2
    anchor_yaw: *anchor_yaw

# model related
model:
  core_method: 
    train: heter_nego
    inf: heter_nego_interact_inf

  args:
    mapping_dict: *mapping_dict
    lidar_range: *cav_lidar
    share_negotiator: True
    # supervise_single: true
    pub:
      pc_grad: *pc_grad
      C_uni: &C_uni 64
      granularity_H: &gra_H 0.8
      granularity_W: &gra_W 0.8

      negotiator:
        dim: *C_uni
        backbone_args:
          resnext: true
          inplanes: *C_uni
          layer_nums: [3, 4]
          layer_strides: [1, 2]
          num_filters: [64, 64]
          upsample_strides: [1, 2]
          num_upsample_filter: [64, 64]
          anchor_number: *anchor_num
        shrink_header_args:
          kernal_size: [ 3 ]
          stride: [ 1 ]
          padding: [ 1 ]
          dim: [ *C_uni ]
          input_dim: 128 # 128 * w

    m1:
      allied: false
      model_dir: stage0_m1_collab
      core_method: *core_method_m1
      sensor_type: *sensor_type_m1
      local_dim: &local_dim_m1 64

      encoder_args:
        voxel_size: *voxel_size
        lidar_range: *cav_lidar
        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]
        point_pillar_scatter:
          num_features: 64

      backbone_args:
        layer_nums: [3]
        layer_strides: [2]
        num_filters: [64]
  
      aligner_args:
        core_method: identity

      comm_args:  
        unify_parameters:
          C_uni: *C_uni
          # Compute from: H_uni: 128, W_uni: 256; unify_range: [-102.4, -51.2, -3, 102.4, 51.2, 1]
          granularity_H: *gra_H
          granularity_W: *gra_W
        resizer:
          method: cbam
          local_dim: *local_dim_m1
          reduce_raito: 2 
        recombiner:
          core_method: convnext
          spatial_align: false
          args:
            num_of_blocks: 2
            dim: *C_uni
        converter:
          num_of_blocks: 1
          # dim: *m1_num_code # *C_uni: convert bf decom, *convert_phase: convert af decom
          dim: *C_uni
          window_size: 2
          # heads: 1 # 8 of bf_decom, 1 of af_decom
          heads: 16
          drop_out: 0.2

      fusion_net:
        method: pyramid
        args: 
          resnext: true
          layer_nums: [3, 5, 8]
          layer_strides: [1, 2, 2]
          num_filters: [64, 128, 256]
          upsample_strides: [1, 2, 4]
          num_upsample_filter: [128, 128, 128]
          anchor_number: *anchor_num

      shrink_header: 
        kernal_size: [ 3 ]
        stride: [ 1 ]
        padding: [ 1 ]
        dim: [ 256 ]
        input_dim: 384 # 128 * 3

      in_head: 256

      anchor_number: *anchor_num
      dir_args: *dir_args
    
    m2:
      allied: false
      model_dir: stage0_m2_collab
      core_method: *core_method_m2
      sensor_type: *sensor_type_m2
      local_dim: &local_dim_m2 64

      encoder_args:
        anchor_number: *anchor_num
        grid_conf: *grid_conf_m2
        data_aug_conf: *data_aug_conf_m2
        img_downsample: 8
        img_features: &img_feature 128
        use_depth_gt: false
        depth_supervision: true
        camera_encoder: EfficientNet

      camera_mask_args:
        cav_lidar_range: *cav_lidar
        grid_conf: *grid_conf_m2

      backbone_args:
        layer_nums: [3]
        layer_strides: [2]
        num_filters: [64]
        inplanes: 128

      aligner_args:
        core_method: identity

      comm_args:  
        dim: *C_uni
        unify_parameters:
          C_uni: *C_uni
          # Compute from: H_uni: 128, W_uni: 256; unify_range: [-102.4, -51.2, -3, 102.4, 51.2, 1]
          granularity_H: *gra_H
          granularity_W: *gra_W
        resizer:
          method: cbam
          local_dim: *local_dim_m2
          reduce_raito: 2 
        recombiner:
          core_method: convnext
          spatial_align: false
          args:
            num_of_blocks: 2
            dim: *C_uni
        converter:
          num_of_blocks: 1
          # dim: *m1_num_code # *C_uni: convert bf decom, *convert_phase: convert af decom
          dim: *C_uni
          window_size: 2
          # heads: 1 # 8 of bf_decom, 1 of af_decom
          heads: 16
          drop_out: 0.2

      fusion_net: 
        method: pyramid
        args:  
          resnext: true
          layer_nums: [3, 5, 8]
          layer_strides: [1, 2, 2]
          num_filters: [64, 128, 256]
          upsample_strides: [1, 2, 4]
          num_upsample_filter: [128, 128, 128]
          anchor_number: *anchor_num

      shrink_header: 
        kernal_size: [ 3 ]
        stride: [ 1 ]
        padding: [ 1 ]
        dim: [ 256 ]
        input_dim: 384 # 128 * 3

      in_head: 256

      anchor_number: *anchor_num
      dir_args: *dir_args

loss:
  core_method: 
    nego: nego_loss_vanilla
    # ft: nego_finetune_loss
  args:
    invariance:
      std_ratio: 0.01
      mask_gaussian_smooth:
        k_size: 5
        c_sigma: 1.0
    cycle:
      ratio: 1 # loss scaling ratio
    re_cycle:
      ratio: 1 # loss scaling ratio
    unify:
      # method: contrastive
      # args:
      #   tau: 0.1
      #   max_voxel: 30

      method: invariance
      args:
        mse_cons: all
        ratio: 1
        pre_ratio: 1

    pos_cls_weight: 2.0
    cls:
      type: 'SigmoidFocalLoss'
      alpha: 0.25
      gamma: 2.0
      weight: 1.0
    reg:
      type: 'WeightedSmoothL1Loss'
      sigma: 3.0
      codewise: true
      weight: 2.0
    dir:
      type: 'WeightedSoftmaxClassificationLoss'
      weight: 0.2
      args: *dir_args
    depth:
      weight: 1.0
    pyramid:
      relative_downsample: [1, 2, 4]
      weight: [0.4, 0.2, 0.1]
